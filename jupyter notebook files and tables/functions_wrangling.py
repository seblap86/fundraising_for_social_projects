#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import pandas as pd
import numpy as np
import re


# In[ ]:


def column_selection_renaming(df):
    '''
    Selection of relevant columns. Renaming columns. 
    '''
    df = df[['project_name', 'project_founder', 'project_location', 'category', 'fund_date_end', 'fund_currency', 'fund_goal', 'goal_tipping point', 'goal_stretch point', 'fund_progress', 'percentagefunded', 'percstretch', 'fund_supporter', 'Word_count']]
    df.columns = ['title', 'founder', 'location', 'topic', 'year', 'currency', 'funding_goal', 'funding_goal_tipping_point', 'funding_goal_stretch_point', 'funding_raised', 'percentage_of_goal', 'percentage_of_goal_stretch', 'number_of_supporters', 'word_count_description']
    return df


# In[ ]:


def missing_values_handling(df):
    '''
    Replacing missing values in number_of_supporters with min value in this column (very small amounts); turn column into integer (float before).
    Replacing missing value in topic with "Health" (based on content inspection).
    Replacing missing values in word_count_description with median (due to skew); turn column into integer.
    '''
    fill = min(df.number_of_supporters)
    df.fillna(fill, inplace=True)
    df['number_of_supporters'] = df['number_of_supporters'].astype(int)
    df.loc[200, "topic"] = str (df.loc[200, "topic"]).replace("2.0", "Health")
    Null_title = df[df['title'] == "Cancer Chemo Hope and Healing Baskets"]
    Null_title.replace("2.0", "Health")
    df['word_count_description'] = df['word_count_description'].fillna(df['word_count_description'].median())
    df['word_count_description'] = df['word_count_description'].astype(int)
    return df


# In[ ]:


def duplicates_handling(df):
    '''
    Dropping duplicates.
    '''
    df.drop_duplicates(subset=['title'], inplace=True)
    return df


# In[ ]:


def location_wrangling(df):
    '''
    Categorization of values in location column into countries, where possible (starting with US, then in bunches).
    '''
    category_pattern = "United States"
    similar_activities= set()
    for value in df['location']:
        if type(value) == str and value != "United States" and re.search(category_pattern, value):
            similar_activities.add(value)
    United_States = list(similar_activities)
    df['location'] = df['location'].apply(lambda x: 'United States' if x in United_States else x)
    
    country_mapping = {
    "Washington, DC": "United States",
    "Los Angeles": "United States",
    "Atlanta": "United States",
    "New York": "United States",
    "Austin": "United States",
    "Seattle": "United States",
    "Chicago": "United States",
    "San Diego": "United States",
    "Denver": "United States",
    "Boston": "United States",
    "Salt Lake City": "United States",
    "Cincinnati, OH": "United States",
    "San Francisco, CA": "United States",
    "San Francisco": "United States",
    "Indianapolis": "United States",
    "Baltimore": "United States",
    "Colorado Springs": "United States",
    "Melbourne": "Australia",
    "Sydney": "Australia",
    "Brisbane": "Australia",
    "Perth": "Australia",
    "London": "United Kingdom",
    "Vancouver": "Canada",
    "Montreal, Canada": "Canada",
    "Budapest": "Hungary",
    "Powell River": "Canada",
    "Cambridge": "United Kingdom",
    "Great Plains, USA and Canada": "Canada",
    "Lake Country, British Columbia, Canada": "Canada",
    "Canada": "Canada",
    "Worldwide, Canada": "Canada",
    "Thunder Bay": "Canada",
    "Saint John": "Canada",
    "Verdun": "Canada",
    "wikwemikong": "Canada",
    "Truro": "Canada",
    "North Vancouver": "Canada",
    "TORONTO": "Canada",
    "St. John's": "Canada",
    "Vancouver": "Canada",
    "Sydney": "Australia",
    "Melbourne": "Australia",
    "Australia": "Australia",
    "United Kingdom": "United Kingdom",
    "Canada": "Canada",
    "Cambodia": "Cambodia",
    "Kenya": "Kenya",
    "Brisbane": "Australia",
    "London": "United Kingdom",
    "Washington, DC": "United States",
    "Myanmar": "Myanmar",
    "Phnom Penh": "Cambodia",
    "Los Angeles": "United States",
    "Unspecified": "Unspecified",
    "Adelaide": "Australia",
    "Atlanta": "United States",
    "Vancouver": "Canada",
    "New York": "United States",
    "Seattle": "United States",
    "Singapore": "Singapore",
    "Austin": "United States",
    "San Diego": "United States",
    "Chicago": "United States",
    "Sweden": "Sweden",
    "Canberra": "Australia",
    "Perth": "Australia",
    "Salt Lake City": "United States",
    "Toronto": "Canada",
    "Kampala": "Uganda",
    "Nairobi": "Kenya",
    "Boston": "United States",
    "Oakland": "United States",
    "Colombo": "Sri Lanka",
    "Denver": "United States",
    "Parramatta": "Australia",
    "Washington, D.C.": "United States",
    "Cincinnati, OH": "United States",
    "Kathmandu": "Nepal",
    "Siem Reap": "Cambodia",
    "Addis Ababa": "Ethiopia",
    "San Francisco, CA": "United States",
    "Lagos": "Nigeria",
    "Bangladesh": "Bangladesh",
    "Indianapolis": "United States",
    "Ubud": "Indonesia",
    "Houston": "United States",
    "India": "India",
    "Honolulu": "United States",
    "Mzuzu, Malawi": "Malawi",
    "Aurora": "United States",
    "Paris": "France",
    "Windsor": "Canada",
    "Berlin": "Germany",
    "Amsterdam, Netherlands": "Netherlands",
    "Brussels": "Belgium",
    "Dhaka": "Bangladesh",
    "Austria": "Austria",
    "Genova, Italy": "Italy",
    "Black Rock City, NV": "United States",
    "Boston, MA": "United States",
    "North Sulawesi, Indonesia": "Indonesia",
    "Albuquerque": "United States",
    "Columbus": "United States",
    "Miami": "United States",
    "Bangkok": "Thailand",
    "National": "Unknown",
    "Manila, Philippines": "Philippines",
    "Portland": "United States",
    "Dallas": "United States",
    "Hong Kong, Hong Kong": "Hong Kong",
    "Washington DC": "United States",
     "Hong Kong": "Hong Kong",
    "Italy": "Italy",
    "Thailand": "Thailand",
    "Bali, Indonesia": "Indonesia",
    "Lalitpur, Nepal": "Nepal",
    "Accra, Ghana": "Ghana",
    "Ithaca, NY": "United States",
    "Sacramento": "United States",
    "Tucson": "United States",
    "Cleburne, TX": "United States",
    "Santee": "United States",
    "Fremantle": "Australia",
    "Twinsburg": "United States",
    "India": "India",
    "Kinshasa/Goma/Bukavu/Uvira": "Democratic Republic of the Congo",
    "Netherlands": "Netherlands",
    "Fort Smith": "United States",
    "Bangladesh": "Bangladesh",
    "Austria": "Austria",
    "Monrovia": "Liberia",
    "San Jose": "United States",
    "France": "France",
    "Durban": "South Africa",
    "Brighton": "United Kingdom",
    "Gold Coast": "Australia",
    "Normandy Beach, NJ": "United States",
    "Dharamsala": "India",
    "India": "India",
    "Kampala, Uganda": "Uganda",
    "Netherlands": "Netherlands",
    "Bangladesh": "Bangladesh",
    "Milan, Italy": "Italy",
    "Liberia": "Liberia",
    "France": "France",
    "South Africa": "South Africa",
    "Lima, Peru": "Peru",
    "Pittsburgh": "United States",
    "Santa Cruz": "Unknown",
    "Cincinnati": "United States",
    "Democratic Republic of the Congo": "Democratic Republic of the Congo",
    "Sierra Nevada de Santa Marta, Colombia": "Colombia",
    "Malawi": "Malawi",
    }
    df['location'] = df['location'].apply(lambda x: country_mapping.get(x, x))
    
    country_mapping_2 = {
    "Singapore, Singapore": "Singapore",
    "Peru": "Peru",
    "Bangladesh": "Bangladesh",
    "Beaverton": "United States",
    "Malawi": "Malawi",
    "Austria": "Austria",
    "Newcastle": "United Kingdom",
    "Kathmandu, Nepal": "Nepal",
    "Normandy Beach, NJ // Dharamsala": "United States",  # Assuming it's Normandy Beach, NJ
    "India": "India",
    "Liberia": "Liberia",
    "Lahore": "Pakistan",
    "Eagle Mountain": "United States",
    "Melbourne, VIC": "Australia",
    "Ponta Porã, Brazil": "Brazil",
    "Armidale": "Australia",
    "Palawan, Philippines": "Philippines",
    "Rio de Janeiro": "Brazil",
    "Aguilares": "Unknown",  # Country information not provided
    "Milton": "Canada",  # Country information not provided
    "Littleton": "United States",  # Co
    "Matipwili, Tanzania, United Republic of" : "Tanzania",
    "Sydney, Australia": "Australia",
    "Melbourne, Australia": "Australia",
    "Perth, Australia": "Australia",
    "Phnom Penh, Cambodia": "Cambodia",
    "Unspecified": "Unknown",
    "Adelaide, Australia": "Australia",
    "Brisbane, Australia": "Australia",
    "Melbourne": "Australia",
    "Canberra, Australia": "Australia",
    }
    df['location'] = df['location'].apply(lambda x: country_mapping_2.get(x, x))
    
    country_mapping_3 = {
    'Maleny, Sunshine Coast, Queensland, Australia': 'Australia',
    'Lancaster': 'United Kingdom',
    'Lindome , Sweden': 'Sweden',
    'Canberra, Australia': 'Australia',
    'London, United Kingdom': 'United Kingdom',
    'Northampton, MA': 'United States',
    'Perth WA ': 'Australia',
    'Bellingham, Washington': 'United States',
    'Regional Victoria, Australia': 'Australia',
    'Apartadó - Antioquia': 'Colombia',
    'Cambodia': 'Cambodia',
    'Gaithersburg': 'United States',
    'Brisbane, Australia': 'Australia',
    'All, Virgin Islands, U.S.': 'U.S.',
    'Peru': 'Peru',
    'Macedon, Australia': 'Australia',
    'Santa Rosa': 'United States',
    'Coolangatta, QLD, Australia': 'Australia',
    'Montanita': 'Ecuador',
    'Glasgow': 'United Kingdom',
    'Bronx': 'United States',
    'Mercer Island': 'United States',
    'Canaan, Haiti': 'Haiti',
    'Newcastle': 'United Kingdom',
    'United Kingdom': 'United Kingdom',
    'Sydney, Australia': 'Australia',
    'Banjul': 'Gambia',
    'Wales': 'United Kingdom',
    'Granada': 'Spain',
    'Central Point, OR': 'United States',
    'Byron Bay, NSW': 'Australia',
    'Spring Lake': 'United States',
    'Ojai': 'United States',
    'Sunshine Coast, Australia': 'Australia',
    'Hue, Vietnam': 'Vietnam',
    'Seville': 'Spain',
    'Richmond': 'United States',
    'Raleigh': 'United States',
    'Vancouver, Canada': 'Canada',
    'Bogor': 'Indonesia',
    'Columbia Station': 'United States',
    'Fort Myers': 'United States',
    'Adelaide, Australia': 'Australia',
    'Jeffersonville': 'United States',
    'Singapore, Singapore': 'Singapore',
    'Medellín, Colombia': 'Colombia',
    'Rombo, Kenya': 'Kenya',
    'Loliondo, Tanzania, United Republic of': 'Tanzania',
    'Meiktila, Myanmar': 'Myanmar',
    'Neenah': 'United States',
    'CIVITELLA PAGANICO, Italy': 'Italy',
    'Managua, Leon, Granada, Tisma, Nandasmo': 'Nicaragua',
    'Budapest, Canada': 'Canada',
    'Melbourne, Australia': 'Australia',
    'GRAZ, VIENNA, WALDVIERTEL, AUSTRIA': 'Austria',
    'Stanford ': 'United States',
    'fayetteville ': 'United States',
    'Bangor, Gwynedd, United Kingdom': 'United Kingdom',
    'North Gosford': 'United Kingdom',
    'Montreal': 'Canada',
    'Singapore': 'Singapore',
    'Central West NSW, Australia': 'Australia',
    'Sipulan, Don Jose Aguirre, Zamboanga del Norte, Philippines': 'Philippines',
    'Newport Beach': 'United States',
    'Sunshine Coast': 'United States',
    'Wollongong , Australia': 'Australia',
    'Madison': 'United States',
    'Kingsbridge': 'United Kingdom',
    'Clinton, CT': 'United States',
    'Farmingdale': 'United States',
    'Black Rock City': 'United States',
    'Albury, Australia': 'Australia',
    'Katito, Kenya': 'Kenya',
    'Port Elizabeth, South Africa': 'South Africa',
    'Damak': 'Austria',
    'Crested Butte': 'United States',
    'Abuja': 'Nigeria',
    'Embu, Kenya': 'Kenya',
    "St. John's, Canada": 'Canada',
    'Pembroke': 'Canada',
    'Kolkata': 'India',
    'California, MD': 'United States',
    'Omaha': 'United States',
    'Seattle / Tacoma Washington': 'United States',
    'Charlotte': 'United States',
    'Woodstock': 'Unknown',
    'Atlanta, GA': 'United States',
    'Beirut, Lebanon': 'Lebanon',
    'Kampong Speu Province': 'Cambodia',
    'DeRidder': 'United States',
    'Melbourne ': 'Australia',
    'Central Coast NSW, Australia': 'Australia',
    'Birmingham, United Kingdom': 'United Kingdom',
    'Woodbridge, United Kingdom': 'United Kingdom',
    'Buffalo': 'United States',
    'Cisarua, Indonesia': 'Indonesia',
    'Lomé, Togo': 'Togo',
    'Accra': 'Ghana',
    'Orlando': 'United States',
    'Chevy': 'United States',
    'Tak': 'Thailand',
    'San Pedro Sula ': 'Honduras',
    'PUTTAPARTHY': 'Unknown',
    'Dunsborough': 'Australia',
    'Ottawa': 'Canada',
    'Sunnyvale': 'United States',
    'Byron Bay , Australia': 'Australia',
    'Berkeley': 'United States',
    'Cairns, Australia': 'Australia',
    'Isle of Mull, United Kingdom': 'United Kingdom',
    'Queensland , Australia': 'Australia',
    'Campada Maria, Guinea-Bissau': 'Guinea-Bissau',
    'Dover': 'United States',
    'Hong Kong': 'China',
    'Nairobi, Kenya': 'Kenya',
    'Stockholm': 'Sweden',
    'Court Sunrise': 'United States',
    'Bendigo': 'Australia',
    'Nation-wide, Senegal': 'Senegal',
    'Saint John, Canada': 'Canada',
    'San Francisco ': 'United States',
    'SW Florida, USA': 'United States',
    'Seaford': 'United Kingdom',
    'Chirino, Dominican Republic': 'Dominican Republic',
    'Sydney , Australia': 'Australia',
    'Copenhagen, Denmark': 'Denmark',
    'Runchet, Nepal': 'Nepal',
    'Dhaka, Bangladesh': 'Bangladesh',
    'Kumba, South West Region': 'Cameroon',
    'Moshi, Tanzania, United Republic of': 'Tanzania',
    'Perth, Australia': 'Australia',
    'Des Moines, Iowa': 'United States',
    'Kampot/Melbourne': 'Australia',
    'Phnom Penh, Cambodia': 'Cambodia',
    'Ywangan Township, Myanmar': 'Myanmar',
    'Bristol': 'United Kingdom',
    'North vancouver, Canada': 'Canada',
    'Tampa': 'United States',
    'Siem Reap, Cambodia': 'Cambodia',
    'La Laguna de Apoyo, Nicaragua': 'Nicaragua',
    'Kuching, Malaysia': 'Malaysia',
    'Pescadero': 'United States',
    'MUMIAS': 'Kenya',
    'Australia, Australia': 'Australia',
    'Calbayog City, Philippines': 'Philippines',
    'Melbourne, Sydney, Global': 'Australia',
    'Northwest, China': 'China',
    'Kuala Lumpur, Malaysia': 'Malaysia',
    'Yangon, Myanmar': 'Myanmar',
    'Parramatta, Australia': 'Australia',
    'Brisbane , Australia': 'Australia',
    'Fremantle, Australia': 'Australia',
    'Melbourne , Australia': 'Australia',
    'Victoria, Australia': 'Australia',
    'Darwin, Australia': 'Australia',
    'St Albans, United Kingdom': 'United Kingdom',
    'Little Bassa, Liberia': 'Liberia',
    'Kurdistan, Iraq': 'Iraq',
    'Suamico, WI': 'United States',
    'Nador, Morocco': 'Marocco',
    'PERTH, Australia': 'Australia',
    'Jakmel and surrounding areas, Haiti': 'Haiti',
    'Sululta': 'Ethiopia',
    'Timisoara': 'Romania',
    'Freetown, Sierra Leone': 'Sierra Leone',
    'Palu, Indonesia': 'Indonesia',
    'Springfield (Montco) PA': 'United States',
    'Kerandangan , Indonesia': 'Indonesia',
    'Melbourne, Sydney, Adelaide': 'Australia',
    'Freetown': 'Sierra Leone',
    'George, South Africa': 'South Africa',
    'Aguilares': 'El Salvador',
    'Antigua': 'United Kingdom',
    'Vashon': 'United States',
    'Allentown PA': 'United States',
    'Santa Cruz Cuautomatitla, Mexico': 'Mexico',
    'KwaZulu Natal, South Africa': 'South Africa',
    'Lhokseumawe, Indonesia': 'Indonesia',
    'Bulawayo': 'Zimbabwe',
    'Twontay Township, Myanmar': 'Myanmar',
    'LONDON - BARCELONA, Spain': 'Spain',
    'Kantchari, Burkina Faso': 'Burkina Faso',
    'Hartford': 'Australia',
    'Melbourne, Sydney, Adelaide , Australia': 'Australia',
    'Sonega': 'Australia',
    'Oakland, CA': 'United States',
    'Tamworth': 'United Kingdom',
    'Cambridge, Canada': 'Canada',
    'Rochester, NY': 'United States',
    'Norwood': 'United States',
    'Yingpan village': 'United States',
    'Bucharest, Romania': 'Romania',
    'Desa Repi': 'Indonesia',
    'Cotonou, Benin': 'Benin',
    'Antigua':'Spain',
    'BUNDABERG': 'Australia',
    'Aguilares': 'El Salvador',
    'Norwich':'United Kingdom',
    'Cleveland OH': 'United States',
    'Homa Bay, Kenya': 'Kenya',
    'Port-de-Paix, Haiti': 'Haiti',
    'Boulder': 'United States',
    'Peoria': 'United States',
    'Hong Kong': 'China',
    'Naga Valadia, Kutch, Gujarat, India': 'India',
    'Gosford': 'United States',
    'Picton, Australia': 'Australia',
    'Littleton, CO': 'United Kingdom',
    'Tanunda': 'Australia',
    'newport, United Kingdom': 'United Kingdom',
    'Monrovia-Tubmanburg, Liberia': 'Liberia',
    'Bandung, Jawa Barat': 'Indonesia',
    'Jinja, Uganda': 'Uganda',
    'Oak Park': 'United States',
    'Hong Kong': 'China',
    'Mzuzu &amp; Nkhotakota, Malawi': 'Malawi',
    'Melbourne - the outer norther suburbs!': 'Australia',
    }
    df['location'] = df['location'].apply(lambda x: country_mapping_3.get(x, x))
    
    country_mapping_4 = {
    'Frankston': 'Australia',
    'Las Lagunas': 'Unknown',
    'Des Moines Iowa': 'United States',
    'Nangi Village, Nepal': 'Nepal',
    'Philadelphia': 'United States',
    'Tampaksiring, Bali, Australia': 'Australia',
    'Falls Church': 'United States',
    'Raja County, Golok Prefecture, Eastern Tibet': 'Tibet',
    'New York, NY': 'United States',
    'Kumasi, Ghana': 'Ghana',
    'Adoor, Kerala and beyond, India': 'India',
    'St. Louis': 'United States',
    'Sisaket, Thailand': 'Thailand',
    'St. Paul': 'United States',
    'Savage, Minnesota': 'United States',
    'TORONTO, Canada': 'Canada',
    'Parramatta and Greater Western Sydney, Australia': 'Australia',
    'Aurora Community': 'United States',
    'gold coast': 'United States',
    'EUMUNDI, Australia': 'Australia',
    'Cusco Department, Peru': 'Peru',
    'Port Jefferson': 'United States',
    'Fremantle, Australia': 'Australia',
    'Biratnagar, Nepal': 'Nepal',
    'Whitefish': 'United States',
    'Choote Danda, Nepal': 'Nepal',
    'Darwin': 'Australia',
    'Brisbane , Australia': 'Australia',
    'New Hartford/Winsted': 'United States',
    'Tulsa': 'United States',
    'Chinsurah, Hooghly, India': 'India',
    'Denver and Ithaca': 'United States',
    'Bamenda': 'United States',
    'Austin, Texas': 'United States',
    'Kpalimé - Kloto, Togo': 'Togo',
    'Ngo, Nigeria': 'Nigeria',
    'Broolyn': 'United States',
    'Athens': 'Greece',
    'Jerusalem, Israel': 'Israel',
    'Salvador': 'El Salvador',
    'Idaho Falls': 'United States',
    'Melbourne, Australia, Australia': 'Australia',
    'Corvallis ': 'United States',
    'Multiple cities in Rwanda where bananas are grown': 'Rwanda',
    'Port Vila, Vanuatu': 'Vanuatu',
    'Bahrain, Bahrain': 'Bahrain',
    'Rwamagana, Rwanda': 'Rwanda',
    'Pomfret Center, Connecticut': 'United States',
    'Saint Lucia': 'United States',
    'Port Au Prince': 'United States',
    'San Miguel de Allende': 'Venezuela',
    'Zanzibar, Muungoni, Tanzania, United Republic of': 'Tanzania',
    'Memphis': 'United States',
    'London / Accra': 'United Kingdom/Ghana',
    'Mission Viejo': 'United States',
    'Rayong': 'Thailand',
    'South Portland': 'United States',
    'Rusk': 'United States',
    'Danlí, Honduras': 'Honduras',
    'Caracas, Venezuela, Bolivarian Republic of': 'Venezuela',
    'Tampa, FL': 'United States',
    'Brighton, United Kingdom': 'United Kingdom',
    'Nassau, Bahamas': 'Bahamas',
    'Flushing': 'United States',
    'Very small communities in Sierra Gorda, Querétaro, Mexico': 'Mexico',
    'Victoria, Australia': 'Australia',
    'Birmingham': 'United Kingdom',
    'Medellin': 'United States',
    'Los Angeles, California': 'United States',
    'Cham': 'United States',
    'Dunmore': 'United States',
    'Melbourne , Australia': 'Australia',
    'Saratoga Springs': 'United States',
    'Parramatta, Sydney, Australia': 'Australia',
    'Guguletu, Cape Town, South Africa': 'South Africa',
    'Tlaxcala': 'Unknown',
    'Manila ': 'Philippines',
    'Antioch': 'Unknown',
    'Rwamwanja, Uganda': 'Uganda',
    'Petach Tikva, Israel': 'Israel',
    'Cherkassy': 'Unknown',
    'Gold Coast, Australia': 'Australia',
    'Fremantle, Western Australia, Australia': 'Australia',
    'Winter Springs': 'United States',
    'Santa Barbara ': 'United States',
    'Kampong Speu, Cambodia': 'Cambodia',
    'Florianópolis, Brazil': 'Brazil',
    'Ljungskile, Sweden': 'Sweden',
    'Shanghai': 'China',
    'Washington, DC, USA': 'United States',
    'Australia Wide, Australia': 'Australia',
    'Istanbul': 'Turkey',
    'Amherst': 'Netherlands',
    'Springfield, IL': 'United States',
    'St. Louis, Missouri': 'United States',
    'Houston, TX': 'United States',
    'sagar, India': 'India',
    'Sydney, Melbourne, Adelaide': 'Australia',
    'Ngoma, Rwanda': 'Rwanda',
    'Minembwe, Congo': 'Congo',
    'Dong Xuan district, Phu Yen province, Vietnam': 'Vietnam',
    'Tacoma': 'United States',
    'Johannesburg, South Africa, Zambia': 'South Africa',
    'Eaglehawk': 'Australia',
    'Allentown': 'United States',
    'Keng Tung , Myanmar': 'Myanmar',
    'Hyderabad': 'India',
    'Perth , Australia': 'Australia',
    'Nkhata Bay, Malawi': 'Malawi',
    'Shanghai , China': 'China',
    'Paramatta, Australia': 'Australia',
    'Saint Louis': 'United States',
    'Enmore': 'Unknown',
    'Bondi, Australia': 'Australia',
    'New Orleans': 'United States',
    'Guidowel': 'Unknown',
    'Adelaide, South Australia, Australia': 'Australia',
    'various': 'Unknown',
    'Serra Grande, Brazil': 'Brazil',
    'Harvard, Illinois': 'United States',
    'MELBOURNE': 'Australia',
    'YUS Conservation Area': 'United States',
    'Poughkeepsie': 'United States',
    'Managua': 'Nicaragua',
    'Stockholm, Sweden': 'Sweden',
    'West Hartford': 'United States',
    'Northcote': 'United States',
    'NY NY': 'United States',
    'Brisbane ': 'Australia',
    'Boston, MA, USA': 'United States',
    'Johns River, Australia': 'Australia',
    'Alvarado': 'United States',
    'Long':'United States',
    'Lviv, Ukraine':'Ukraine',
    'Bekasi, West Java, Indonesia':'Indonesia',
    'North of Chiapas': 'United States',
    'Mpamantha, Nkotakota, Malawi':'Malawi',
    'Norwell': 'United States',
    'Buenos Aires, Argentina':'Argentina',
    'Breinigsville': 'United States',
    'Silver Spring': 'United States',
    'Davao, Philippines':'Phillipines',
    'Melbourne - the outer norther suburbs!':'Australia',
    'Punta Gorda, Belize':'Belize',
    'Phillipines':'Phillipines',
    'San Salvador, EL Salvador':'EL Salvador',
    'Kisumu, Kenya':'Kenya',
    'Miami, FL':'United States',
    'Coventry':'United Kingdom',
    'Ngorongoro Conservation Area, Tanzania, United Republic of':'Tanzania',
    'Ghent':'Belgium',
    'Hinesburg':'United States',
    'Soweto, South Africa':'South Africa',
    'Hunter Valley':'Australia',
    'Kolkata and Central India, India': 'India',
    'Oakland, CA': 'Canada',
    'Arnhem Land':'Australia',
    'Manila': 'Phillipines',
    'Denver, CO': 'United States',
    }
    df['location'] = df['location'].apply(lambda x: country_mapping_4.get(x, x))
    
    country_mapping_5 = {
    'Unknown': 'Unknown',
    'Colombia': 'Colombia',
    'Cambodia': 'Cambodia',
    'United States': 'United States',
    'Peru': 'Peru',
    'Ecuador': 'Ecuador',
    'Haiti': 'Haiti',
    'Gambia': 'Gambia',
    'Spain': 'Spain',
    'Vietnam': 'Vietnam',
    'Canada': 'Canada',
    'Indonesia': 'Indonesia',
    'Singapore': 'Singapore',
    'Kenya': 'Kenya',
    'Tanzania': 'Tanzania',
    'Myanmar': 'Myanmar',
    'Italy': 'Italy',
    'Nicaragua': 'Nicaragua',
    'Austria': 'Austria',
    'Nepal': 'Nepal',
    'Philippines': 'Philippines',
    'India': 'India',
    'South Africa': 'South Africa',
    'Netherlands': 'Netherlands',
    'Nigeria': 'Nigeria',
    'Panama': 'Panama',
    'Ghana': 'Ghana',
    'Lebanon': 'Lebanon',
    'Belgium': 'Belgium',
    'Togo': 'Togo',
    'Thailand': 'Thailand',
    'Honduras': 'Honduras',
    'Uganda': 'Uganda',
    'Guinea-Bissau': 'Guinea-Bissau',
    'China': 'China',
    'Senegal': 'Senegal',
    'Dominican Republic': 'Dominican Republic',
    'Denmark': 'Denmark',
    'Bangladesh': 'Bangladesh',
    'Cameroon': 'Cameroon',
    'Sri Lanka': 'Sri Lanka',
    'Madagascar': 'Madagascar',
    'Malaysia': 'Malaysia',
    'Frankston': 'Unknown',
    'Tibet': 'Tibet',
    'Democratic Republic of the Congo': 'Democratic Republic of the Congo',
    'Greece': 'Greece',
    'Israel': 'Israel',
    'El Salvador': 'El Salvador',
    'Rwanda': 'Rwanda',
    'Vanuatu': 'Vanuatu',
    'Bahrain': 'Bahrain',
    'Venezuela': 'Venezuela',
    'Malawi': 'Malawi',
    'United Kingdom/Ghana': 'United Kingdom/Ghana',
    'Bahamas': 'Bahamas',
    'Mexico': 'Mexico',
    'Brazil': 'Brazil',
    'Turkey': 'Turkey',
    'Congo': 'Congo',
    'Longmont': 'Longmont',
    'Medellín and others': 'Medellín and others',
    'Kalkaringi, Australia': 'Australia',
    'Beloit': 'Beloit',
    'El Paredon': 'El Paredon',
    'Kasoa, Ghana': 'Ghana',
    'Niger Delta Region, Nigeria': 'Nigeria',
    'Mindoro Island, Philippines': 'Philippines',
    'Aquin, Haiti': 'Haiti',
    'Verdun, Canada': 'Canada',
    'Siteki, Swaziland': 'Swaziland',
    'Gorkha District, Nepal': 'Nepal',
    'Exeter': 'Exeter',
    'Liberia': 'Liberia',
    'Williamsport, PA': 'United States',
    'Battambang': 'Battambang',
    'Deerfield Beach': 'Deerfield Beach',
    'Capelle Aan Den IJssel, Netherlands': 'Netherlands',
    'Pokhara, Nepal': 'Nepal',
    'Kharagpur': 'Kharagpur',
    'Oshkosh': 'Oshkosh',
    'Cochabamba, Bolivia': 'Bolivia',
    'Faisalabad, Pakistan': 'Pakistan',
    'Tel Aviv': 'Israel',
    'Jakarta, Bogor, Indonesia': 'Indonesia',
    'Puncak, Indonesia': 'Indonesia',
    'Gusau': 'Gusau',
    'Pomona': 'Pomona',
    'Mbarara, Uganda': 'Uganda',
    'New Orleans, LA': 'United States',
    'Cedar Knolls, NJ': 'United States',
    'Islands of Vanua Levu and Taveuni': 'Unknown',
    'Margaret River': 'Australia',
    'Nobby, QLD, Australia': 'Australia',
    'New York, New York': 'United States',
    'Jogja': 'Indonesia',
    'Delmenhorst, Germany': 'Germany',
    'Stanford, USA': 'United States',
    'Ann Arbor': 'United States',
    'Antwerp': 'Belgium',
    'Mbita': 'Kenya',
    'Dar es Salaam': 'Tanzania',
    'Ijok, Kuala Selangor': 'Malaysia',
    'Sunnyvale, CA': 'United States',
    'Chiang Rai, Thailand': 'Thailand',
    'Nashville TN': 'United States',
    'Fort Dodge': 'United States',
    'Nampa, Idaho': 'United States',
    'Chateaubelair, Saint Vincent and the Grenadines': 'Saint Vincent and the Grenadines',
    'Novato': 'United States',
    'Palm Island , Australia': 'Australia',
    'Kilimanjaro, Tanzania, United Republic of': 'Tanzania',
    'Canton': 'United States',
    'Kavango region, Namibia': 'Namibia',
    'Benbrook, Texas': 'United States',
    'Newfane': 'United States',
    'Hokkaido , Japan': 'Japan',
    'Cape Town': 'South Africa',
    'Ioannina, Greece': 'Greece',
    'Almaty, Kazakhstan': 'Kazakhstan',
    'Binh Duong, Vietnam': 'Vietnam',
    'Caiman, Haiti': 'Haiti',
    'Detroit': 'United States',
    'larache, Morocco': 'Morocco',
    'Győr, Hungary': 'Hungary',
    'Ometepe , Nicaragua': 'Nicaragua',
    'Recife, Brazil': 'Brazil',
    'Leiden, Netherlands': 'Netherlands',
    'Byron Bay, Australia': 'Australia',
    'Argentina': 'Argentina',
    'NSW, Australia': 'Australia',
    "D'kar, Botswana": 'Botswana',
    'Kampot, Cambodia': 'Cambodia',
    'Liverpool': 'United Kingdom',
    'Indianapolis, Indiana': 'United States',
    'Lake Country, British Columbia, Canada': 'Canada',
    'Gothenburg, Sweden': 'Sweden',
    'Karachi, Pakistan': 'Pakistan',
    'Weston': 'United States',
    'Northport': 'United States',
    'Fraser Island': 'Australia',
    'Janwar, India': 'India',
    'Salem, VA': 'United States',
    'LeVeque, Haiti': 'Haiti',
    'Birsbane': 'United States',
    'Lubuk Linggau, Indonesia': 'Indonesia',
    'Kathmandu and Nuwakot and Rasuwa District, Nepal': 'Nepal',
    'Bali': 'Indonesia',
    'Christchurch, United Kingdom': 'United Kingdom',
    'Christchurch, New Zealand': 'New Zealand',
    'Central Coast': 'Australia',
    'Royal Oak, Michigan': 'United States',
    'Heidelberg, Germany': 'Germany',
    'Kangaroo Island, Australia': 'Australia',
    'Powell River, Canada': 'Canada',
    'Padua': 'Unknown',
    'Cologne, Germany': 'Germany',
    'Townsville, Australia': 'Australia',
    'Naryn, Kyrgyzstan': 'Kyrgyzstan',
    'Kigali': 'Rwanda',
    'City of Parramatta, Australia': 'Australia',
    'boston': 'United States',
    'Gainesville': 'United States',
    'Global': 'Unknown',
    'Warner Robins': 'United States',
    'Providence, RI': 'United States',
    'Greater Minneapolis, and Southern MN': 'United States',
    'Copenhagen': 'Denmark',
    'Annapolis': 'United States',
    'Berkley': 'Unknown',
    'Framingham, Massaschusetts': 'United States',
    'Punta Gorda': 'United States',
    'Louisville': 'United States',
    'Nicosia': 'Cyprus',
    'Tortona AL': 'Italy',
    'Melbourne | Sydney': 'Australia',
    'Brisbane + Sydney': 'Australia',
    'OLBIA': 'Australia',
    'rural India': 'India',
    'Brisbane, QLD': 'Australia',
    'Kumassi': 'Ghana',
    'Wollongong, Australia': 'Australia',
    'Orange': 'United States',
    'Berkshire County': 'United Kingdom',
    'Lilongwe': 'Malawi',
    'South East Queensland, Australia': 'Australia',
    'Winter Haven': 'United States',
    'Findhorn, United Kingdom': 'United Kingdom',
    'Linz, Austria': 'Austria',
    'Germany': 'Germany',
    'Upper Northfield': 'United Kingdom',
    'Mumbai, India': 'India',
    'Yajalon Region, Chiapas, Mexico': 'Mexico',
    'Palo Alto': 'United States',
    'Granbury': 'United States',
    'Aliab Villages, Lakes State': 'South Sudan',
    'wikwemikong, Canada': 'Canada',
    'North Dublin, Ireland': 'Ireland',
    'Truro, Canada': 'Canada',
    'Apaah': 'Unknown',
    'Berkeley, CA': 'United States',
    'Atiak': 'Uganda',
    'Grove City': 'United States',
    'France': 'France',
    'Central Coast NSW': 'Australia',
    'Ouagadougou': 'Burkina Faso',
    'Dumaguete': 'Philippines',
    'Alice Springs': 'Australia',
    'Kilifi, Kenya': 'Kenya',
    'Oaxaca, Mexico': 'Mexico',
    'Gothenburg, Sweden': 'Sweden',
    'Gold Coast': 'Australia',
    'New York City': 'United States',
    'Saltsburg': 'United States',
    'Felipe Carrillo Puerto': 'Mexico',
    'Cardiff, United Kingdom': 'United Kingdom',
    'Incline Village and Reno, Nevada': 'United States',
    'Bommiyarpalayam, Tamil Nadu': 'India',
    'Ypsilanti': 'United States',
    'Bistol, United Kingdom': 'United Kingdom',
    'Chateaubelair, Saint Vincent And The Grenedines': 'Saint Vincent and the Grenadines',
    'Thunder Bay, Canada': 'Canada',
    'Springdale': 'United States',
    'Bangkok': 'Thailand',
    'Glen Burnie': 'United States',
    'Orrville': 'United States',
    'Des Moines': 'United States',
    'Springfield': 'United States',
    'Moin': 'Costa Rica',
    'Parksville': 'Canada',
    'Brievengat': 'Curaçao',
    'Port-au-Prince, Haiti': 'Haiti',
    'Agra, India': 'India',
    'Melbourne - the outer norther suburbs!': 'Australia',
    'Melbourne - the outer norther suburbs! ': 'Australia',
    'Palangka Raya': 'Indonesia',
    'Kampot': 'Cambodia',
    'Pakistan': 'Pakistan',
    'Hong Kong': 'Hong Kong',
    'Aguilares': 'El Salvador',
    'Ethiopia': 'Ethiopia',
    'Burkina Faso': 'Burkina Faso',
    'Zimbabwe': 'Zimbabwe',
    'Antigua': 'Antigua and Barbuda',
    'Marocco': 'Morocco',
    'Iraq': 'Iraq',
    'Romania': 'Romania',
    'Sierra Leone': 'Sierra Leone',
    'Benin': 'Benin',
    'Aliso Viejo': 'United States',
    'Anantapur, India': 'India',
    'Ho Chi Minh City, Vietnam': 'Vietnam',
    'Gloucester': 'United Kingdom',
    'Port Melbourne , Australia': 'Australia',
    'Charleston': 'United States',
    'San Antonio, TX': 'United States',
    'Kuserua, Rio Pastaza, Ecuador': 'Ecuador',
    'Pucallpa': 'Peru',
    'Kuala Lumpur': 'Malaysia',
    'Nonspecific': 'Unknown',
    'Baku, Azerbaijan': 'Azerbaijan',
    'Abingdon': 'United Kingdom',
    'Toowoomba & South East Queensland, Australia': 'Australia',
    'Magadi-Kenya, Kenya': 'Kenya',
    'Wichita': 'United States',
    'Sydney, NSW': 'Australia',
    'New Haven': 'United States',
    'EL Salvador': 'El Salvador',
    'Yeadon': 'United Kingdom',
    'São Paulo': 'Brazil',
    'Gaza': 'Palestine',
    'Belize': 'Belize',
    'Ukraine': 'Ukraine',
    'Phillipines': 'Philippines',
    'Fiji': 'Fiji',
    'Lilongwe, Malawi': 'Malawi',
    'Seattle, WA': 'United States',
    'Port Moresby and all around PNG, Papua New Guinea': 'Papua New Guinea',
    'Bali': 'Indonesia',
    'Byron Bay': 'Australia',
    'Preševo, Serbia': 'Serbia',
    'Calais , France': 'France',
    'BLANDFORD': 'United Kingdom',
    'Kyiv, Ukraine': 'Ukraine',
    'countryside, Toliara region, Madagascar': 'Madagascar',
    'Guatemala': 'Guatemala',
    'Dexter': 'United States',
    'Yallingup, Australia': 'Australia',
    'Wuhan, China': 'China',
    'Manly NSW, Australia': 'Australia',
    'Kittery, Maine': 'United States',
    'Jamnya, India': 'India',
    'Toowoomba': 'Australia',
    'Oakland, CA': 'United States',
    'Rock Valley': 'Australia',
    'Nkob, Zagora Province, Morocco': 'Morocco',
    'Northern Thailand': 'Thailand',
    'Kep, Cambodia': 'Cambodia',
    'Fairfax': 'United States',
    'Tsavo-West-Nationalpark, Kenya': 'Kenya',
    'Port Kembla': 'Australia',
    'Loveland, CO, united states': 'United States',
    'Chiang Mai': 'Thailand',
    'Davenport': 'United States',
    'Europe, Belgium': 'Belgium',
    'Adealide, Australia': 'Australia',
    'Kitchener Waterloo': 'Canada',
    'Atami': 'Japan',
    'Shoalhaven NSW, Australia': 'Australia',
    'Charlottesville': 'United States',
    'Komenda, Ghana': 'Ghana',
    'Delaware': 'United States',
    'Palm Bay/Melbourne Florida': 'United States',
    'Ocotal': 'Nicaragua',
    'Atlanta, India': 'India',
    'Hobart, Australia': 'Australia',
    'Woodstock': 'Canada',
    'Dallas/Fort Worth': 'United States',
    'Burringbar': 'Australia',
    'Chicago, IL': 'United States',
    'Sofía, Belgrade, Thessaloniki, Padova, Lampedusa, Bulgaria': 'Bulgaria',
    'Woolgoolga, Australia': 'Australia',
    'Port Saint Lucie': 'United States',
    'Telluride, CO, United states': 'United States',
    'Castro Valley': 'United States',
    'Red Deer Alberta': 'Canada',
    'Shuswap/Secwepemc': 'Canada',
    'Chiang Mai, Thailand': 'Thailand',
    '0000': 'Unknown',
    'Blacksburg, Virginia': 'United States',
    'Little Rock, Arkansas': 'United States',
    'Senigallia': 'Italy',
    'Syndey': 'Unknown',
    'Berryville': 'United States',
    'York': 'United Kingdom',
    'Kaysville': 'United States',
    'Myeik, Myanmar': 'Myanmar',
    'Layton, Utah': 'United States',
    'Denpasar': 'Indonesia',
    'Ngong, Mombasa, Kenya': 'Kenya',
    'Hermanus': 'South Africa',
    'Martina Franca': 'Italy',
    'Perth, Australia, Australia': 'Australia',
    'San Francisco, South Africa': 'South Africa',
    'Cartagena, Colombia': 'Colombia',
    'Geraldton': 'Australia',
    'Cherkasy': 'Ukraine',
    'Buenos Aires': 'Argentina',
    'Berlin, Germany': 'Germany',
    'Parramatta, Australia, australia': 'Australia',
    'Harrow-on-the-Hill': 'United Kingdom',
    'Stockholm, sweden': 'Sweden',
    'Lyon': 'France',
    'Tortola, Virgin Islands, British': 'British Virgin Islands',
    'Crediton': 'United Kingdom',
    'Columbia, SC': 'United States',
    'Porto': 'Portugal',
    'Stavanger': 'Norway',
    'Baguia, Timor-Leste': 'Timor-Leste',
    'Nakuru, Kenya': 'Kenya',
    'Saint Paul': 'United States',
    'Montréal': 'Canada',
    'Chermaitre, Haiti': 'Haiti',
    'Springville': 'United States',
    'Neyyar Dam, India': 'India',
    'Blackheath': 'Australia',
    'Campeche, Mexico': 'Mexico',
    'Bosomtwe District / Ashanti Region near Kumasi, Ghana': 'Ghana',
    'Perth': 'Australia',
    'Morphett Vale': 'Australia',
    'Mpigi, Uganda': 'Uganda',
    'Bronx, NY': 'United States',
    'Ashland, Oregon': 'United States',
    'Accra, Kumasi, Ghana': 'Ghana',
    'Rishikesh': 'India',
    'DC, MD, VA areas': 'United States',
    'Pune': 'India',
    'Zürich, Switzerland': 'Switzerland',
    'Leederville, Western Australia, Australia': 'Australia',
    'Queens': 'United States',
    'Hebron, Palestine, State of': 'Palestine',
    'Kansas City': 'United States',
    'United Kingdom/Ghana': 'Ghana',
    'Longmont': 'United States', 
    'Medellín and others': 'Colombia', 
    'Beloit': 'United States',
    'El Paredon': 'Guatemala',  
    'Exeter': 'United States',
    'Battambang': 'Cambodia',
    'Deerfield Beach': 'United States', 
    'Kharagpur': 'India', 
    'Oshkosh': 'India',
    'Gusau': 'India',
    'Pomona': 'United States', 
    'Islands of Vanua Levu and Taveuni ': 'Fiji',   
    'U.K.': 'United Kingdom', 
    'Lake Country, British Columbia, Canada, Canada': 'Canada',
    'Gothenburg, Sweden, Sweden': 'Sweden', 
    'Bali ': 'Indonesia',  
    'Cyprus': 'Greece', 
    'Gold Coast ': 'United States', 
    'Bangkok ': 'Thailand', 
    'Curaçao': 'United States',
    'Hong Kong ': 'China',
    'Aguilares ':'El Salvador',
    'Antigua ': 'Antigua', 
    'Toowoomba &amp; South East Queensland, Australia': 'Australia', 
    'Palestine': 'Israel',
    'Oakland, CA ': 'Canada',
    'Woodstock ': 'United States', 
    'British Virgin Islands': 'United Kingdom', 
    'Crediton ': 'United Kingdom', 
    'Perth ': 'Australia', 
    'Rabaul, Papua New Guinea': 'Papua New Guinea',
    'U.S.':'United States',
    'Frankston ':'Australia',
    }
    df['location'] = df['location'].apply(lambda x: country_mapping_5.get(x, x))
    
    return df 


# In[ ]:


def currencies_related_wrangling(df):
    '''
    Wrangling of all currency-related columns:
    Converting datatypes of numerical columns from string to float.
    Dropping funding_goal_tipping_point as it is meant to be the same as funding_goal.
    Converting all currency-related columns to USD (exchange rates as of Nov 16, 2020, https://fxtop.com/en/historical-currency-converter.php).
    Dropping currency column (as all are USD now).
    
    '''
    df['funding_goal'] = df['funding_goal'].apply(lambda x: x.replace(",","") if isinstance(x, str) else x).astype(float)
    df['funding_goal_tipping_point'] = df['funding_goal_tipping_point'].apply(lambda x: x.replace(",","") if isinstance(x, str) else x).astype(float)
    df['funding_goal_stretch_point'] = df['funding_goal_stretch_point'].apply(lambda x: x.replace(",","") if isinstance(x, str) else x).astype(float)
    df['funding_raised'] = df['funding_raised'].apply(lambda x: x.replace(",","") if isinstance(x, str) else x).astype(float)
    
    df = df.drop('funding_goal_tipping_point',axis=1)
    
    exchange_rates = {
    'USD': 1,
    'AUD': 0.729077,
    'EUR': 1.183,
    'GBP': 1.317093,
    'CAD': 0.764409,
    'SGD': 0.742438,
    'CHFCHF': 1.093447,
    'SEK': 0.115372,
    'MXN': 0.049323,
    'RZAR': 0.064877,
    'KSKES': 0.009154,
    'COP': 0.000275,
    'NZD': 0.686713,
    'NGN': 0.002646,
    'INR': 0.013431,
    'JPY': 0.009529,
    'MAD': 0.109543,
    'DKK': 0.158835,
    'HKD': 0.128972,
    'FJD': 0.475678,
    'NOK': 0.110241
    }
    df['exchange_rate'] = df['currency'].apply(lambda x: exchange_rates.get(x,x))
    df['funding_goal'] = round((df['funding_goal'] * df['exchange_rate']), 2)
    df['funding_goal_stretch_point'] = round((df['funding_goal_stretch_point'] * df['exchange_rate']), 2)
    df['funding_raised'] = round((df['funding_raised'] * df['exchange_rate']), 2)
    df = df.drop('exchange_rate',axis=1)
    df = df.drop('currency',axis=1)
    
    return df


# In[ ]:


def goals_wrangling(df):
    '''
    Recalculating percentage_of_goal due to some errors (division by 0) present in original values.
    Fixing "0" values in funding_goal_stretch_point (as these are not logical, by replacing with funding_goal).
    Creating column specifying whether or not stretch goal was set.
    Recalculating percentage_of_goal_stretch (same issue as with funding_goal_stretch).
    Adding a column that gives us the stretch goal relative to the funding goal.
    Re-ordering columns.
    '''
    df['percentage_of_goal'] = round((df['funding_raised'] / df['funding_goal']), 4)
    df['stretch_goal_no_yes'] = df['funding_goal_stretch_point'].apply(lambda x: 1 if x != 0 else 0)
    df['funding_goal_stretch_point'] = np.where(df['funding_goal_stretch_point'] == 0, df['funding_goal'], df['funding_goal_stretch_point'])
    df['percentage_of_goal_stretch'] = round((df['funding_raised'] / df['funding_goal_stretch_point']), 4)
    df['relative_stretch_goal'] = round((df['funding_goal_stretch_point'] / df['funding_goal']), 4)
    df = df[['title', 'founder', 'location', 'topic', 'year', 'funding_goal', 'stretch_goal_no_yes', 'funding_goal_stretch_point', 'relative_stretch_goal', 'funding_raised', 'percentage_of_goal', 'percentage_of_goal_stretch', 'number_of_supporters', 'word_count_description']]
    return df


# In[ ]:


def year_wrangling(df):
    '''
    Extracting year and turning into integer.
    '''
    df['year'] = df['year'].apply(lambda x: x[-5:] if isinstance(x, str) else x)
    df['year'] = df['year'].astype(int)
    return df


# In[ ]:


def export_dataframes(df):
    '''
    Exports three dataframes as .csv-files: 
    projects.csv (main dataframe with primary key), 
    topics.csv (topics with primary key), 
    topic_relationships.csv (many-to-many relationship with foreign keys of both projects and topics).
    '''
    df['project_id'] = [x+1 for x in range(len(df['title']))]
    df = df[['project_id', 'title', 'founder', 'location', 'topic', 'year', 'funding_goal',
       'stretch_goal_no_yes', 'funding_goal_stretch_point',
       'relative_stretch_goal', 'funding_raised', 'percentage_of_goal',
       'percentage_of_goal_stretch', 'number_of_supporters',
       'word_count_description']]
    projects = df.drop('topic', axis=1).reset_index(drop=True)
    projects.to_csv('projects.csv', index=False)
    
    topic_df = df['topic'].copy()
    topic_df = topic_df.apply(lambda x: x.split(";") if type(x)==str else x)
    topic_df_long = topic_df.explode('topic')
    topic_df_long = topic_df_long[topic_df_long != '']
    topic_df_long = topic_df_long.reset_index(drop = True)
    topic_df_long = topic_df_long.apply(lambda x: x.strip() if isinstance(x, str) else x)
    topics_list = list(topic_df_long.unique())
    topics_list.sort()
    topics = pd.DataFrame({'topic_id': [i+1 for i in range(len(topics_list))], 'topic': topics_list})
    topics.to_csv('topics.csv', index=False)
    
    topic_relationships = df[['project_id', 'topic']]
    topic_relationships['topic'] = topic_relationships['topic'].apply(lambda x: x.split(";") if type(x)==str else x)
    topic_relationships = topic_relationships.explode('topic')
    topic_relationships = topic_relationships.apply(lambda x: x.strip() if isinstance(x, str) else x)
    topic_relationships = topic_relationships[topic_relationships != '']
    topic_relationships = topic_relationships.dropna()
    topic_relationships = topic_relationships.reset_index(drop = True)
    topics_mapping = dict(zip(topics['topic'], topics['topic_id']))
    topic_relationships['topic'] = topic_relationships['topic'].apply(lambda x: topics_mapping.get(x,x)).astype(int)
    topic_relationships.rename(columns= {'topic': 'topic_id'}, inplace=True)
    topic_relationships.to_csv('topic_relationships.csv', index=False)


# In[ ]:


def data_wrangling_and_export(df):
    df = column_selection_renaming(df)
    df = missing_values_handling(df)
    df = duplicates_handling(df)
    df = location_wrangling(df)
    df = currencies_related_wrangling(df)
    df = goals_wrangling(df)
    df = year_wrangling(df)
    export_dataframes(df)

